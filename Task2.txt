1. Introduction to APIs & Endpoints
   -------------------------------------------------------------------------------------------------------------------------
   -> An API (Application Programming Interface) allows different applications to communicate by defining a set of rules for requests and responses.
   -> APIs can be public (open to external developers) or private (used internally within a system).
   -> Endpoints are specific URLs that clients interact with to access or manipulate data.
   
   -> Common HTTP methods:
      1. GET: Retrieve data from the server (e.g., fetch a list of users).
      2. POST: Create new data on the server (e.g., add a new product to inventory).
      3. PUT: Update existing data (e.g., modify user details).
      4. DELETE: Remove data from the server (e.g., delete a customer account).
      5. PATCH: Partially update data (e.g., change only the status of an order without modifying other fields).
   
   -> APIs can be designed as RESTful APIs, which follow principles such as statelessness and resource-based communication.
  
  

2️. What is an Endpoint?
   ---------------------------------------------------------------------------------------------------------------------------
   -> An endpoint is a specific URL where an API receives requests and returns responses, usually mapped to specific actions in a controller.
   -> It follows this format:

      => https://example.com/api/{controller}/{action}/{id}
      => https://example.com/api/products/1 → Fetches product with ID 1.
   
      => Each endpoint is tied to an action method in a controller that processes the request and interacts with the database if necessary.
   
   -> How Each Endpoint Works:

      1. GET /api/product → Returns a list of products.
      2. GET /api/product/1 → Returns product with ID 1.
      3. POST /api/product → Accepts a new product in the request body and adds it to the list.
      4. PUT /api/product/1 → Updates product with ID 1.
      5. PATCH /api/product/1 → Partially updates product with ID 1.
      6. DELETE /api/product/1 → Deletes product with ID 1.
   
   -> Endpoints should follow RESTful principles, ensuring clear naming conventions and appropriate HTTP status codes.
  
  

3. Request-Response Flow in .NET Web API
   ----------------------------------------------------------------------------------------------------------------------------
   -> The typical request-response flow in an ASP.NET Web API application:
   
      1. Client sends a request (using Fetch, Axios, Postman, etc.).
      2. ASP.NET Web API receives the request and routes it to the appropriate controller action.
      3. Controller processes the request (validates input, checks authentication, etc.).
      4. Server interacts with the database via Entity Framework Core.
      5. API returns a response** to the client in JSON or XML format.
   
   -> Status Codes in API Responses:
      - 200 OK: Successful response.
      - 201 Created: Resource successfully created.
      - 400 Bad Request: Invalid input data.
      - 401 Unauthorized: Authentication required.
      - 403 Forbidden: Access denied.
      - 404 Not Found: Resource does not exist.
      - 500 Internal Server Error: Unexpected error on the server.
   


4. Key Takeaways:
   -----------------------------------------------------------------------------------------------------------------------------
   -> .NET Web API is used to create scalable, secure, and flexible REST APIs for web and mobile applications.
   -> Endpoints define how the client interacts with the server, supporting CRUD operations.
   -> Entity Framework Core integrates databases, enabling seamless data manipulation.
   -> JWT (JSON Web Token) Authentication secures endpoints, ensuring authorized access to protected resources.
   -> CORS (Cross-Origin Resource Sharing) policies allow or restrict access from different domains.
   -> Frontend applications consume APIs via Fetch API, Axios (JavaScript), or HttpClient (Angular/React).
   -> API versioning ensures backward compatibility when modifying or upgrading endpoints.
   -> Deployment can be done via Docker, Kubernetes, or cloud platforms like Azure, AWS, and Google Cloud.
   -> API documentation can be generated using Swagger (OpenAPI) for better maintainability and usage understanding.
   
   -> Best Practices for API Development:
      - Use meaningful endpoint names (e.g., `/api/users` instead of `/api/getUsers`).
      - Implement error handling and logging.
      - Secure APIs with authentication and authorization mechanisms.
      - Use pagination for large data retrieval.
      - Optimize database queries to reduce response time.
      - Follow RESTful conventions and avoid exposing internal database structures.

